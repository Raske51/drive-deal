#!/usr/bin/env node

/**
 * Script de d√©ploiement automatis√© pour DriveDeal
 * Ce script automatise le processus de d√©ploiement des correctifs d'alignement et d'espacement.
 * 
 * Utilisation:
 * 1. Assurez-vous que Node.js est install√©
 * 2. Rendez le script ex√©cutable: chmod +x deploy.js
 * 3. Ex√©cutez le script: ./deploy.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const readline = require('readline');

// Configuration
const CONFIG = {
  cssFiles: [
    { source: 'styles/alignment-fixes.css', required: true },
    { source: 'styles/listings-fixes.css', required: true }
  ],
  appFile: 'pages/_app.js',
  listingsFiles: [
    'pages/listings.js',
    'pages/vehicles.js',
    'pages/cars.js'
  ],
  backupDir: '.backup',
  gitBranch: 'fix/spacing-alignment'
};

// Interface pour les interactions utilisateur
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Fonction principale
async function main() {
  console.log('\nüöÄ D√©marrage du d√©ploiement automatis√© des correctifs DriveDeal\n');
  
  try {
    // √âtape 1: V√©rification de l'environnement
    checkEnvironment();
    
    // √âtape 2: Cr√©ation des sauvegardes
    await createBackups();
    
    // √âtape 3: V√©rification des fichiers CSS
    checkCssFiles();
    
    // √âtape 4: Mise √† jour de _app.js
    updateAppFile();
    
    // √âtape 5: Recherche et mise √† jour des fichiers de listings
    await updateListingsFiles();
    
    // √âtape 6: Construction et d√©ploiement
    await buildAndDeploy();
    
    console.log('\n‚úÖ D√©ploiement termin√© avec succ√®s!\n');
    console.log('üìã Prochaines √©tapes recommand√©es:');
    console.log('1. V√©rifiez le site en production');
    console.log('2. Testez sur diff√©rents appareils et navigateurs');
    console.log('3. Surveillez les performances avec Lighthouse ou PageSpeed Insights\n');
    
  } catch (error) {
    console.error(`\n‚ùå Erreur: ${error.message}`);
    console.log('\nüîÑ Restauration des sauvegardes...');
    
    try {
      restoreBackups();
      console.log('‚úÖ Restauration termin√©e');
    } catch (backupError) {
      console.error(`‚ùå Erreur lors de la restauration: ${backupError.message}`);
      console.log('‚ö†Ô∏è Vous devrez peut-√™tre restaurer manuellement vos fichiers depuis le dossier .backup');
    }
  } finally {
    rl.close();
  }
}

// V√©rification de l'environnement
function checkEnvironment() {
  console.log('üîç V√©rification de l\'environnement...');
  
  // V√©rifier si nous sommes dans un projet Next.js
  if (!fs.existsSync('package.json')) {
    throw new Error('package.json non trouv√©. Assurez-vous d\'ex√©cuter ce script √† la racine de votre projet Next.js');
  }
  
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  if (!packageJson.dependencies || (!packageJson.dependencies.next && !packageJson.devDependencies?.next)) {
    throw new Error('Ce ne semble pas √™tre un projet Next.js. V√©rifiez que next est list√© dans les d√©pendances');
  }
  
  console.log('‚úÖ Environnement valide');
}

// Cr√©ation des sauvegardes
async function createBackups() {
  console.log('üíæ Cr√©ation des sauvegardes...');
  
  // Demander confirmation
  const answer = await askQuestion('Voulez-vous cr√©er une branche Git pour les modifications? (O/n): ');
  const useGit = answer.toLowerCase() !== 'n';
  
  if (useGit) {
    try {
      // V√©rifier si Git est initialis√©
      execSync('git status', { stdio: 'ignore' });
      
      // Cr√©er une nouvelle branche
      execSync(`git checkout -b ${CONFIG.gitBranch}`, { stdio: 'inherit' });
      console.log(`‚úÖ Branche Git '${CONFIG.gitBranch}' cr√©√©e`);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Git n\'est pas disponible ou n\'est pas initialis√©. Utilisation de sauvegardes de fichiers √† la place.');
      useGit = false;
    }
  }
  
  if (!useGit) {
    // Cr√©er le r√©pertoire de sauvegarde s'il n'existe pas
    if (!fs.existsSync(CONFIG.backupDir)) {
      fs.mkdirSync(CONFIG.backupDir, { recursive: true });
    }
    
    // Sauvegarder _app.js
    if (fs.existsSync(CONFIG.appFile)) {
      const backupPath = path.join(CONFIG.backupDir, path.basename(CONFIG.appFile));
      fs.copyFileSync(CONFIG.appFile, backupPath);
    }
    
    // Sauvegarder les fichiers de listings
    for (const file of CONFIG.listingsFiles) {
      if (fs.existsSync(file)) {
        const backupPath = path.join(CONFIG.backupDir, path.basename(file));
        fs.copyFileSync(file, backupPath);
      }
    }
    
    console.log(`‚úÖ Sauvegardes cr√©√©es dans le dossier '${CONFIG.backupDir}'`);
  }
}

// V√©rification des fichiers CSS
function checkCssFiles() {
  console.log('üîç V√©rification des fichiers CSS...');
  
  for (const file of CONFIG.cssFiles) {
    if (!fs.existsSync(file.source)) {
      if (file.required) {
        throw new Error(`Fichier CSS requis non trouv√©: ${file.source}`);
      } else {
        console.log(`‚ö†Ô∏è Fichier CSS optionnel non trouv√©: ${file.source}`);
      }
    }
  }
  
  console.log('‚úÖ Fichiers CSS v√©rifi√©s');
}

// Mise √† jour de _app.js
function updateAppFile() {
  console.log('üîÑ Mise √† jour de _app.js...');
  
  if (!fs.existsSync(CONFIG.appFile)) {
    throw new Error(`Fichier ${CONFIG.appFile} non trouv√©`);
  }
  
  let appContent = fs.readFileSync(CONFIG.appFile, 'utf8');
  let modified = false;
  
  // V√©rifier et ajouter les imports CSS manquants
  for (const file of CONFIG.cssFiles) {
    const importStatement = `import '../${file.source}';`;
    if (!appContent.includes(importStatement)) {
      // Trouver la derni√®re ligne d'import
      const importLines = appContent.match(/import.*from.*|import\s+['"].*['"]/g) || [];
      
      if (importLines.length > 0) {
        const lastImport = importLines[importLines.length - 1];
        appContent = appContent.replace(lastImport, `${lastImport}\n${importStatement}`);
      } else {
        // Ajouter au d√©but du fichier
        appContent = `${importStatement}\n${appContent}`;
      }
      
      modified = true;
    }
  }
  
  if (modified) {
    fs.writeFileSync(CONFIG.appFile, appContent);
    console.log(`‚úÖ ${CONFIG.appFile} mis √† jour avec les imports CSS`);
  } else {
    console.log(`‚ÑπÔ∏è ${CONFIG.appFile} contient d√©j√† tous les imports n√©cessaires`);
  }
}

// Recherche et mise √† jour des fichiers de listings
async function updateListingsFiles() {
  console.log('üîç Recherche des fichiers de listings...');
  
  let listingsFile = null;
  
  // Chercher parmi les fichiers connus
  for (const file of CONFIG.listingsFiles) {
    if (fs.existsSync(file)) {
      listingsFile = file;
      break;
    }
  }
  
  // Si aucun fichier trouv√©, demander √† l'utilisateur
  if (!listingsFile) {
    console.log('‚ö†Ô∏è Aucun fichier de listings trouv√© automatiquement');
    const customPath = await askQuestion('Veuillez entrer le chemin du fichier de listings (ou "skip" pour ignorer): ');
    
    if (customPath.toLowerCase() === 'skip') {
      console.log('‚ÑπÔ∏è Mise √† jour des fichiers de listings ignor√©e');
      return;
    }
    
    if (!fs.existsSync(customPath)) {
      throw new Error(`Fichier ${customPath} non trouv√©`);
    }
    
    listingsFile = customPath;
  }
  
  console.log(`üîÑ Mise √† jour du fichier de listings: ${listingsFile}`);
  
  // Lire le contenu du fichier
  let content = fs.readFileSync(listingsFile, 'utf8');
  
  // V√©rifier si le fichier contient d√©j√† les classes CSS
  const hasMainContainer = content.includes('listings-main-container');
  const hasPageLayout = content.includes('page-layout');
  const hasFiltersWrapper = content.includes('filters-wrapper');
  const hasFiltersSticky = content.includes('filters-sticky');
  
  if (hasMainContainer && hasPageLayout && hasFiltersWrapper && hasFiltersSticky) {
    console.log('‚ÑπÔ∏è Le fichier de listings contient d√©j√† les classes CSS n√©cessaires');
    return;
  }
  
  // Demander confirmation avant de modifier
  const answer = await askQuestion('Le fichier de listings doit √™tre mis √† jour. Voulez-vous proc√©der? (O/n): ');
  if (answer.toLowerCase() === 'n') {
    console.log('‚ÑπÔ∏è Mise √† jour du fichier de listings ignor√©e');
    return;
  }
  
  // Analyser le contenu pour identifier la structure
  let modified = false;
  
  // Rechercher le conteneur principal
  const mainContainerRegex = /<div\s+className=["']([^"']*container[^"']*)["']/;
  const mainContainerMatch = content.match(mainContainerRegex);
  
  if (mainContainerMatch) {
    const originalClassName = mainContainerMatch[1];
    if (!originalClassName.includes('listings-main-container')) {
      const newClassName = `${originalClassName} listings-main-container`;
      content = content.replace(
        `className="${originalClassName}"`, 
        `className="${newClassName}"`
      );
      modified = true;
    }
  }
  
  // Rechercher la structure de mise en page
  const layoutRegex = /<div\s+className=["']([^"']*(?:layout|grid|flex)[^"']*)["']/;
  const layoutMatch = content.match(layoutRegex);
  
  if (layoutMatch) {
    const originalClassName = layoutMatch[1];
    if (!originalClassName.includes('page-layout') || !originalClassName.includes('no-bottom-space')) {
      const newClassName = `${originalClassName} page-layout no-bottom-space`;
      content = content.replace(
        `className="${originalClassName}"`, 
        `className="${newClassName}"`
      );
      modified = true;
    }
  }
  
  // Rechercher le conteneur de filtres
  const filtersRegex = /<div\s+className=["']([^"']*(?:filter|sidebar)[^"']*)["']/;
  const filtersMatch = content.match(filtersRegex);
  
  if (filtersMatch) {
    // Ajouter les classes pour le wrapper de filtres si n√©cessaire
    if (!content.includes('filters-wrapper')) {
      const originalFiltersDiv = filtersMatch[0];
      const wrappedFiltersDiv = `<div className="filters-wrapper">\n        ${originalFiltersDiv}`;
      content = content.replace(originalFiltersDiv, wrappedFiltersDiv);
      
      // Ajouter la div de fermeture
      const closingDivIndex = findClosingDivIndex(content, content.indexOf(wrappedFiltersDiv) + wrappedFiltersDiv.length);
      if (closingDivIndex !== -1) {
        content = content.slice(0, closingDivIndex) + '\n      </div>' + content.slice(closingDivIndex);
      }
      
      modified = true;
    }
    
    // Ajouter les classes pour les filtres sticky si n√©cessaire
    const originalClassName = filtersMatch[1];
    if (!originalClassName.includes('filters-sticky') || !originalClassName.includes('no-bottom-space')) {
      const newClassName = `${originalClassName} filters-sticky no-bottom-space`;
      content = content.replace(
        `className="${originalClassName}"`, 
        `className="${newClassName}"`
      );
      modified = true;
    }
  }
  
  if (modified) {
    fs.writeFileSync(listingsFile, content);
    console.log(`‚úÖ ${listingsFile} mis √† jour avec les classes CSS n√©cessaires`);
  } else {
    console.log(`‚ö†Ô∏è Impossible de mettre √† jour automatiquement ${listingsFile}`);
    console.log('‚ÑπÔ∏è Veuillez consulter le guide de d√©ploiement pour les instructions manuelles');
  }
}

// Construction et d√©ploiement
async function buildAndDeploy() {
  console.log('üèóÔ∏è Pr√©paration du d√©ploiement...');
  
  // Demander la m√©thode de d√©ploiement
  const deployMethod = await askQuestion(
    'Choisissez la m√©thode de d√©ploiement:\n' +
    '1. Git (push vers un d√©p√¥t distant)\n' +
    '2. Build manuel (npm run build)\n' +
    '3. Ignorer le d√©ploiement\n' +
    'Votre choix (1-3): '
  );
  
  switch (deployMethod) {
    case '1':
      // D√©ploiement via Git
      console.log('üîÑ D√©ploiement via Git...');
      
      try {
        // Ajouter les fichiers modifi√©s
        execSync('git add .', { stdio: 'inherit' });
        
        // Commit des changements
        execSync('git commit -m "Fix: Correction des probl√®mes d\'alignement et d\'espacement"', { stdio: 'inherit' });
        
        // Demander si on doit fusionner avec main
        const shouldMerge = await askQuestion('Voulez-vous fusionner avec la branche principale? (O/n): ');
        
        if (shouldMerge.toLowerCase() !== 'n') {
          const mainBranch = await askQuestion('Nom de la branche principale (main/master): ') || 'main';
          execSync(`git checkout ${mainBranch}`, { stdio: 'inherit' });
          execSync(`git merge ${CONFIG.gitBranch}`, { stdio: 'inherit' });
        }
        
        // Demander si on doit push
        const shouldPush = await askQuestion('Voulez-vous pousser les changements vers le d√©p√¥t distant? (O/n): ');
        
        if (shouldPush.toLowerCase() !== 'n') {
          execSync('git push', { stdio: 'inherit' });
          console.log('‚úÖ Changements pouss√©s vers le d√©p√¥t distant');
        }
      } catch (error) {
        throw new Error(`Erreur lors du d√©ploiement Git: ${error.message}`);
      }
      break;
      
    case '2':
      // Build manuel
      console.log('üîÑ Construction de l\'application...');
      
      try {
        // D√©tecter le gestionnaire de paquets
        const useYarn = fs.existsSync('yarn.lock');
        const buildCmd = useYarn ? 'yarn build' : 'npm run build';
        
        // Ex√©cuter la commande de build
        execSync(buildCmd, { stdio: 'inherit' });
        console.log('‚úÖ Build termin√© avec succ√®s');
        
        console.log('\n‚ÑπÔ∏è Pour d√©ployer manuellement:');
        console.log('1. Copiez le dossier .next ou out sur votre serveur');
        console.log('2. Ou utilisez la m√©thode de d√©ploiement sp√©cifique √† votre h√©bergeur');
      } catch (error) {
        throw new Error(`Erreur lors du build: ${error.message}`);
      }
      break;
      
    case '3':
      console.log('‚ÑπÔ∏è D√©ploiement ignor√©');
      break;
      
    default:
      console.log('‚ö†Ô∏è Option non valide, d√©ploiement ignor√©');
  }
}

// Restauration des sauvegardes
function restoreBackups() {
  // V√©rifier si nous utilisons Git
  try {
    execSync('git status', { stdio: 'ignore' });
    
    // Annuler les modifications non valid√©es
    execSync('git reset --hard HEAD', { stdio: 'inherit' });
    
    // Revenir √† la branche pr√©c√©dente
    const branches = execSync('git branch', { encoding: 'utf8' });
    const currentBranch = branches.split('\n').find(b => b.startsWith('*')).substring(2);
    
    if (currentBranch === CONFIG.gitBranch) {
      // Trouver la branche pr√©c√©dente
      const otherBranches = branches.split('\n')
        .filter(b => b && !b.startsWith('*'))
        .map(b => b.trim());
      
      if (otherBranches.length > 0) {
        const mainBranch = otherBranches.find(b => ['main', 'master'].includes(b)) || otherBranches[0];
        execSync(`git checkout ${mainBranch}`, { stdio: 'inherit' });
        
        // Supprimer la branche de correctifs
        execSync(`git branch -D ${CONFIG.gitBranch}`, { stdio: 'inherit' });
      }
    }
    
    return;
  } catch (error) {
    // Git n'est pas disponible, utiliser les sauvegardes de fichiers
  }
  
  // Restaurer depuis les sauvegardes de fichiers
  if (fs.existsSync(CONFIG.backupDir)) {
    // Restaurer _app.js
    const appBackup = path.join(CONFIG.backupDir, path.basename(CONFIG.appFile));
    if (fs.existsSync(appBackup)) {
      fs.copyFileSync(appBackup, CONFIG.appFile);
    }
    
    // Restaurer les fichiers de listings
    for (const file of CONFIG.listingsFiles) {
      const backupFile = path.join(CONFIG.backupDir, path.basename(file));
      if (fs.existsSync(backupFile) && fs.existsSync(file)) {
        fs.copyFileSync(backupFile, file);
      }
    }
  }
}

// Fonction utilitaire pour poser une question
function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// Fonction utilitaire pour trouver la div de fermeture correspondante
function findClosingDivIndex(content, startIndex) {
  let openCount = 1;
  let index = startIndex;
  
  while (index < content.length && openCount > 0) {
    // Rechercher la prochaine balise d'ouverture ou de fermeture
    const openTag = content.indexOf('<div', index);
    const closeTag = content.indexOf('</div>', index);
    
    // Si aucune balise n'est trouv√©e, sortir
    if (openTag === -1 && closeTag === -1) break;
    
    // D√©terminer quelle balise vient en premier
    if (openTag !== -1 && (closeTag === -1 || openTag < closeTag)) {
      openCount++;
      index = openTag + 1;
    } else {
      openCount--;
      index = closeTag + 1;
      
      if (openCount === 0) {
        return closeTag;
      }
    }
  }
  
  return -1;
}

// Ex√©cuter le script
main().catch(error => {
  console.error(`\n‚ùå Erreur fatale: ${error.message}`);
  process.exit(1);
}); 